[aws:cloudtrail_exfil]
BREAK_ONLY_BEFORE_DATE = 
DATETIME_CONFIG = 
EVAL-authentication_method = case((('additionalEventData.MFAUsed'="Yes" AND eventName="ConsoleLogin") OR eventName="CheckMfa"), "MFA", ('additionalEventData.MFAUsed'="No" AND eventName="ConsoleLogin") OR ((eventName="AssumeRole" OR eventName="ListAliases") AND 'userIdentity.type'="AssumedRole" AND 'userIdentity.sessionContext.attributes.mfaAuthenticated'="false"), "SFA")
EVAL-aws_account_id = if('userIdentity.type'="AWSAccount" OR 'userIdentity.type'="AWSService", recipientAccountId, 'userIdentity.accountId')
EVAL-dest = case(eventName="PutBucketAcl",'requestParameters.Host',\
                 eventName="GetBucketEncryption",'requestParameters.host{}',\
                 eventName="RunInstances", coalesce('responseElements.instancesSet.items{}.instanceId', 'eventSource'),\
                 eventName="StartInstances", coalesce('requestParameters.instancesSet.items{}.instanceId', 'eventSource'),\
                 eventName="StopInstances" OR eventName="TerminateInstances" OR eventName="RebootInstances",'requestParameters.instancesSet.items{}.instanceId',\
                 like(eventName, "%Volume"),coalesce('requestParameters.instanceId', 'eventSource'),\
                 like(eventName, "%Bucket"),'requestParameters.host{}',\
                 like(eventName, "Put%"),coalesce('requestParameters.host{}', 'requestParameters.Host'),\
                 eventName="CreateUser" OR eventName="UpdateUser" OR eventName="DeleteUser",'eventSource',\
                 eventName="DeleteLoginProfile",'requestParameters.userName',\
                 eventName="ConsoleLogin" OR eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" OR eventName="CheckMfa" OR eventName="ListAliases",coalesce('additionalEventData.LoginTo', 'eventSource'),\
                 eventName="DeleteSecurityGroup", 'eventSource',\
                 true(), eventSource)
EVAL-dest_ip_range = case(like(eventName, "%SecurityGroupEgress"), 'requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp',\
                         (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true"),  'requestParameters.cidrBlock')
EVAL-dest_port_range = case(like(eventName, "%SecurityGroupEgress%"), mvappend('requestParameters.ipPermissions.items{}.toPort','requestParameters.ipPermissions.items{}.fromPort'),\
                            (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true"), mvappend('requestParameters.portRange.from','requestParameters.portRange.to'))
EVAL-direction = case(((like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false") OR like(eventName, "%SecurityGroupIngress")), "Inbound",\
                      ((like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true") OR like(eventName, "%SecurityGroupEgress")), "Outbound")
EVAL-errorCode = coalesce('errorCode', if(like('responseElements.ConsoleLogin', "Failure"), "failure", "success"), "success")
EVAL-msg = coalesce('errorCode',"success")
EVAL-object = case(like(eventName, "%Instances"),if((eventName="RunInstances"),coalesce('responseElements.instancesSet.items{}.instanceId', 'eventSource'),coalesce('requestParameters.instancesSet.items{}.instanceId', 'eventSource')),\
                   like(eventName, "%SecurityGroup%"),coalesce('responseElements.groupId', 'requestParameters.groupId'),\
                   like(eventName, "%Volume"),if((eventName="CreateVolume"),'responseElements.volumeId', 'requestParameters.volumeId'),\
                   like(eventName, "%NetworkAcl%"),coalesce('requestParameters.networkAclId', 'responseElements.networkAcl.networkAclId'),\
                   (like(eventName, "%Bucket%") OR eventName="PutObject"), 'requestParameters.bucketName',\
                   eventName="CreateUser",'responseElements.user.userName',\
                   eventName="DeleteUser" OR eventName="DeleteLoginProfile",'requestParameters.userName',\
                   eventName="UpdateUser",'requestParameters.newUserName',\
                   eventName="CreateLoginProfile",'responseElements.loginProfile.userName',\
                   eventName="CreateAccessKey", coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                   eventName="CreateVirtualMFADevice",mvindex(split('responseElements.virtualMFADevice.serialNumber', "/"), 1),\
                   eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                   eventName="CreateChangeSet",'requestParameters.stackName',\
                   eventName="CreateDeliveryStream",'requestParameters.deliveryStreamName',\
                   eventName="CreateKeyspace",'requestParameters.keyspaceName',\
                   eventName="CreateLoadBalancerListeners",'requestParameters.loadBalancerName',\
                   eventName="CreateLoadBalancerPolicy",'requestParameters.loadBalancerName',\
                   eventName="CreateQueue",'requestParameters.queueName',\
                   eventName="CreateTable",'requestParameters.tableName',\
                   eventName="CreateFunction20150331",'requestParameters.functionName',\
                   eventName="CreateLogGroup",'requestParameters.logGroupName',\
                   eventName="CreateLogStream",'requestParameters.logStreamName',\
                   eventName="CreateNetworkInterface",'responseElements.networkInterface.networkInterfaceId',\
                   eventName="DeleteNetworkInterface",'requestParameters.networkInterfaceId',\
                   eventName="ListSigningCertificates",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"))
EVAL-object_attrs = case(eventName="CreateKeyspace",replace('requestParameters.rawQuery', ".*(REPLICATION).*class.*:\s*['\"](.*)['\"].*", "\1=\2"),\
                        eventName IN ("CreateUser","DeleteUser","ListSigningCertificates","ListAccessKeys","GetUser","GetAccountSummary", "ListAccountAliases","ListRoles"),"user",\
                        eventName="CreateLoginProfile","passwordResetRequired=". 'responseElements.loginProfile.passwordResetRequired',\
                        eventName="UpdateUser", "userName=". 'requestParameters.userName',\
                        (eventName="CreateAccessKey" AND 'errorCode'="AccessDenied"), "user",\
                        eventName="CreateAccessKey","status=". 'responseElements.accessKey.status',\
                        eventName="CreateVirtualMFADevice", "virtualMFADevice",\
                        eventName="CreateNetworkAcl", if('responseElements.networkAcl.isDefault'== "false", "non-default", "default"),\
                        eventName="CreateNetworkAclEntry", "ruleAction=".'requestParameters.ruleAction',\
                        eventName="DeleteNetworkAclEntry", "ruleNumber=".'requestParameters.ruleNumber',\
                        eventName="ReplaceNetworkAclAssociation", "associationId=".'responseElements.newAssociationId',\
                        like(eventName, "RevokeSecurityGroup%") OR like(eventName, "AuthorizeSecurityGroup%"),"ipPermissions",\
                        eventName="DetachVolume","device=".'responseElements.device',\
                        eventName="AttachVolume","device=".'requestParameters.device'.", deleteOnTermination=".'requestParameters.deleteOnTermination',\
                        eventName="CreateVolume", "volumeType=".'responseElements.volumeType',\
                        eventName IN ("StartInstances", "StopInstances", "TerminateInstances", "RebootInstances"), "EC2",\
                        like(eventName, "%Volume"), "volume",\
                        eventName IN ("DeleteBucket", "CreateBucket"), "bucket",\
                        eventName="RunInstances" AND responseElements="", "subnetId=".'requestParameters.subnetId'.", iamInstanceProfile=".'requestParameters.iamInstanceProfile.name',\
                        eventName="RunInstances", "macAddress=".mvjoin('responseElements.instancesSet.items{}.networkInterfaceSet.items{}.macAddress',", macAddress=").", "."privateIpAddress=".mvjoin('responseElements.instancesSet.items{}.networkInterfaceSet.items{}.privateIpAddress',", privateIpAddress="),\
                        eventName="PutBucketPublicAccessBlock", "RestrictPublicBuckets=".'requestParameters.PublicAccessBlockConfiguration.RestrictPublicBuckets'.", BlockPublicPolicy=".'requestParameters.PublicAccessBlockConfiguration.BlockPublicPolicy'.", BlockPublicAcls=".'requestParameters.PublicAccessBlockConfiguration.BlockPublicAcls'.", IgnorePublicAcls=".'requestParameters.PublicAccessBlockConfiguration.IgnorePublicAcls',\
                        eventName="PutBucketAcl","AccessControlList",\
                        eventName="CreateChangeSet","changeSetName=".'requestParameters.changeSetName',\
                        eventName="CreateDeliveryStream","SplunkDestinationConfiguration",\
                        eventName="CreateLoadBalancerListeners","listeners",\
                        eventName="CreateQueue","message_queue",\
                        eventName="CreateTable","keyspaceName=".'requestParameters.keyspaceName',\
                        eventName="CreateLoadBalancerPolicy","policyName=".'requestParameters.policyName',\
                        eventName="CreateFunction20150331","lambda-console:blueprint".",".'requestParameters.tags.lambda-console:blueprint',\
                        eventName="CreateLogGroup","log_group",\
                        eventName="CreateLogStream","logGroupName=".'requestParameters.logGroupName',\
                        eventName="GetBucketEncryption","bucket",\
                        eventName="PutObject", "x-amz-storage-class=".'requestParameters.x-amz-storage-class',\
                        eventName="DeleteNetworkAcl", "ACL",\
                        eventName="ReplaceNetworkAclEntry","ruleNumber=".'requestParameters.ruleNumber'.", egress=".'requestParameters.egress'.", ruleAction=".'requestParameters.ruleAction',\
                        eventName="CreateSecurityGroup", "groupName=".'requestParameters.groupName',\
                        eventName="DeleteSecurityGroup", "security_group",\
                        eventName="ListAliases","alias",\
                        eventName="DeleteNetworkInterface", "network_interface",\
                        eventName="CreateNetworkInterface", "description=".'responseElements.networkInterface.description'.", macAddress=".'responseElements.networkInterface.macAddress'.", privateIpAddress=".'responseElements.networkInterface.privateIpAddress')
EVAL-object_id = case(eventName="RunInstances",'responseElements.instancesSet.items{}.instanceId',\
                      like(eventName, "%Instances"),coalesce('requestParameters.instancesSet.items{}.instanceId','eventSource'),\
                      like(eventName, "%SecurityGroup%"),coalesce('responseElements.groupId', 'requestParameters.groupId'),\
                      like(eventName, "%Volume"), if((eventName="CreateVolume"), 'responseElements.volumeId', 'requestParameters.volumeId'),\
                      like(eventName, "%NetworkAcl%"), coalesce('requestParameters.networkAclId', 'responseElements.networkAcl.networkAclId'),\
                      (like(eventName, "%Bucket%") OR eventName="PutObject"),'requestParameters.bucketName',\
                      eventName="CreateUser", 'responseElements.user.userId',\
                      eventName="DeleteUser" OR eventName="DeleteLoginProfile", 'requestParameters.userName',\
                      eventName="CreateLoginProfile", 'responseElements.loginProfile.userName',\
                      eventName="UpdateUser", 'requestParameters.newUserName',\
                      eventName="CreateAccessKey", coalesce('responseElements.accessKey.accessKeyId',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                      eventName="CreateVirtualMFADevice", mvindex(split('responseElements.virtualMFADevice.serialNumber', "/"), 1),\
                      eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases", replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                      eventName="CreateChangeSet",'requestParameters.stackName',\
                      eventName="CreateDeliveryStream",'requestParameters.deliveryStreamName',\
                      eventName="CreateKeyspace",'requestParameters.keyspaceName',\
                      eventName="CreateLoadBalancerListeners",'requestParameters.loadBalancerName',\
                      eventName="CreateLoadBalancerPolicy",'requestParameters.loadBalancerName',\
                      eventName="CreateQueue",'requestParameters.queueName',\
                      eventName="CreateTable",'requestParameters.tableName',\
                      eventName="CreateFunction20150331",'requestParameters.functionName',\
                      eventName="CreateLogGroup",'requestParameters.logGroupName',\
                      eventName="CreateLogStream",'requestParameters.logStreamName',\
                      eventName="CreateNetworkInterface",'responseElements.networkInterface.networkInterfaceId',\
                      eventName="DeleteNetworkInterface",'requestParameters.networkInterfaceId',\
                      eventName="ListSigningCertificates",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"))
EVAL-protocol = if(like(eventName, "%SecurityGroup%"), 'requestParameters.ipPermissions.items{}.ipProtocol', null())
EVAL-protocol_code = if(like(eventName, "%NetworkAcl%"), 'requestParameters.aclProtocol', null())
EVAL-rule_action = coalesce('responseElements.networkAcl.entrySet.items{}.ruleAction','requestParameters.ruleAction')
EVAL-src_ip_range = case(like(eventName, "%SecurityGroupIngress"), 'requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp',(like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false"),  'requestParameters.cidrBlock')
EVAL-src_port_range = case(like(eventName, "%SecurityGroupIngress%"), mvappend('requestParameters.ipPermissions.items{}.toPort','requestParameters.ipPermissions.items{}.fromPort'),(like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false"), mvappend('requestParameters.portRange.from','requestParameters.portRange.to'))
EVAL-src_user = case(eventName="PutBucketAcl",'userIdentity.userName',\
                    eventName IN("CreateLoadBalancerListeners", "GetBucketEncryption", "CreateLogStream", "CreateLogGroup", "CreateLoadBalancerPolicy"),'userIdentity.sessionContext.sessionIssuer.userName',\
                    eventName IN("CreateUser", "CreateLoginProfile", "DeleteNetworkInterface"), mvindex(split('userIdentity.principalId', ":"), 1),\
                    eventName="DeleteLoginProfile",'requestParameters.userName',\
                    eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                    eventName="CreateNetworkInterface",'userIdentity.sessionContext.sessionIssuer.userName',\
                    like(eventName, "AssumeRole%"), coalesce('userIdentity.userName', 'requestParameters.sourceIdentity', 'userIdentity.sessionContext.sessionIssuer.userName'),\
                    (eventName="ConsoleLogin" AND  isnotnull('additionalEventData.LoginTo')), null(),\
                    eventName="ConsoleLogin" AND isnull('additionalEventData.LoginTo'), mvindex(split('userIdentity.principalId', ":"), 1),\
                    eventName IN("ListAliases","ListRoles"),mvindex(split('userIdentity.arn', "/"), -1),\
                    like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"),coalesce('userIdentity.userName', 'userIdentity.sessionContext.sessionIssuer.userName'),\
                    true(),'userIdentity.userName')
EVAL-src_user_id = case(eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" OR eventName="ListAliases", if((mvcount(split('userIdentity.principalId', ":")) == 1)\
                        OR (mvcount(split('userIdentity.principalId', ":")) == 2), mvindex(split('userIdentity.principalId', ":"), 0),null()),\
                        eventName="AssumeRole" AND 'userIdentity.type'="IAMUser",mvindex(split('userIdentity.principalId', ":"), 0),\
                        eventName="AssumeRole" AND 'userIdentity.type'="AssumedRole",mvindex(split('userIdentity.sessionContext.sessionIssuer.principalId', ":"), 0),\
                        eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo'), mvindex(split('userIdentity.principalId', ":"), 0),\
                        like(eventName,"%User") AND 'userIdentity.type'!="AWSService",'userIdentity.principalId')
EVAL-src_user_name = case((eventName="DeleteUser" OR eventName="UpdateUser" OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases"), 'userIdentity.userName',\
                           eventName IN("ListAliases","ListRoles"),mvindex(split('userIdentity.arn', "/"), -1),\
                           eventName="CreateLoginProfile" OR eventName="CreateUser", mvindex(split('userIdentity.principalId', ":"), 1))
EVAL-src_user_role = if((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity") AND 'userIdentity.type'="AssumedRole", 'userIdentity.arn', null())
EVAL-src_user_type = case((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" or eventName="ListAliases" OR eventName="ListRoles" OR eventName="CreateLoginProfile" OR like(eventName, "%User") OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="DeleteNetworkInterface") AND 'userIdentity.type'!="AWSService",'userIdentity.type',\
                     (eventType="AwsConsoleSignIn" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo')),'userIdentity.type')
EVAL-user = case(eventName="PutBucketAcl",'userIdentity.userName',\
                 eventName IN("CreateLoadBalancerListeners","CreateLoadBalancerPolicy","CreateLogGroup","CreateLogStream","GetBucketEncryption"),'userIdentity.sessionContext.sessionIssuer.userName',\
                 eventName="CreateLoginProfile",'responseElements.loginProfile.userName',\
                 eventName="CreateUser",'responseElements.user.userName',\
                 (eventName="DeleteUser" OR  eventName="DeleteLoginProfile"),'requestParameters.userName',\
                 eventName="UpdateUser",'requestParameters.newUserName',\
                 eventName="CreateAccessKey",coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                 (eventName="ListSigningCertificates" OR eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="ListSigningCertificates"),replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                 eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                 eventName="CreateNetworkInterface" OR eventName="DeleteNetworkInterface",'userIdentity.sessionContext.sessionIssuer.userName',\
                 eventName="AssumeRole" AND 'userIdentity.type'="AssumedRole",mvindex(split('requestParameters.roleArn', "/"), -1),\
                 eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity",mvindex(split('responseElements.assumedRoleUser.arn',"/"), -1),\
                 eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnotnull('additionalEventData.LoginTo'), coalesce(mvindex(split('userIdentity.principalId', ":"), 1), 'userIdentity.userName'),\
                 eventType="AwsConsoleSignIn" OR eventName IN("ListAliases","ListRoles"),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName'),\
                 like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName'),\
                 true(),'userIdentity.userName')
EVAL-userName = coalesce('userIdentity.userName', 'requestParameters.sourceIdentity','userIdentity.sessionContext.sessionIssuer.userName', if(isnull('userIdentity.arn'), mvindex(split(mvindex(split('requestParameters.roleArn',":"), -1), "/"), -1), mvindex(split(mvindex(split('userIdentity.arn',":"), -1), "/"), -1)))
EVAL-user_agent = coalesce(userAgent,'userAgent{}')
EVAL-user_arn = coalesce('userIdentity.arn', 'requestParameters.roleArn')
EVAL-user_id = case((eventName="ConsoleLogin" AND 'userIdentity.type'="IAMUser") OR eventName="CheckMfa",coalesce(mvindex(split('userIdentity.principalId', ":"), 0), 'userIdentity.accountId'),\
                ((eventName="ConsoleLogin" OR eventName="ListAliases" OR eventName="ListRoles" OR eventName="DeleteNetworkInterface") AND 'userIdentity.type'="AssumedRole"), coalesce(mvindex(split('userIdentity.sessionContext.sessionIssuer.principalId', ":"), 0), mvindex(split('userIdentity.principalId', ":"), 0)),\
                eventName="CreateUser", 'responseElements.user.userId',\
                eventName="DeleteUser" OR eventName="UpdateUser", 'requestParameters.userName',\
                eventType="AwsApiCall",mvindex(split('responseElements.assumedRoleUser.assumedRoleId', ":"), 0),\
                true(), 'userIdentity.userName')
EVAL-user_name = case(eventName="ListRoles",mvindex(split('userIdentity.principalId', ":"), 0),\
                     eventName="CreateLoginProfile", 'responseElements.loginProfile.userName',\
                     eventName="CreateUser",'responseElements.user.userName',\
                     (eventName="DeleteUser" OR  eventName="DeleteLoginProfile"),'requestParameters.userName',\
                     eventName="UpdateUser",'requestParameters.newUserName',\
                     eventName="CreateAccessKey",coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                     (eventName="ListSigningCertificates" OR eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="ListSigningCertificates"),replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                     eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                     true(),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName',if(isnull('userIdentity.arn'),mvindex(split(mvindex(split('requestParameters.roleArn',":"), -1), "/"), -1), mvindex(split(mvindex(split('userIdentity.arn',":"), -1), "/"), -1))))
EVAL-user_role = if(eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity", case('userIdentity.type'="AssumedRole", 'requestParameters.roleArn', 'userIdentity.type'!="AWSService", 'responseElements.assumedRoleUser.arn', 'userIdentity.type'="AWSService", null()), null())
EVAL-user_type = case((eventName="CreateLoginProfile" OR like(eventName, "%User") OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases"), null(),\
                      (eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo')), 'userIdentity.sessionContext.sessionIssuer.type',\
                      eventType="AwsConsoleSignIn" , 'userIdentity.type',\
                      like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"), 'userIdentity.type',\
                      eventName IN("ListAliases", "ListRoles", "DeleteNetworkInterface"),'userIdentity.sessionContext.sessionIssuer.type',\
                      like(eventName, "AssumeRole%"),mvjoin(coalesce('resources{}.type',mvindex(split('responseElements.assumedRoleUser.arn', "/"), 1)), ","),\
                      true(),'userIdentity.type')
EVAL-vendor_account = coalesce('userIdentity.accountId', 'recipientAccountId')
EVAL-vendor_product = "AWS CloudTrail"
FIELDALIAS-accountId_user_group_id = userIdentity.accountId AS user_group_id
FIELDALIAS-awsRegion-for-aws-cloudtrail_region = awsRegion AS region
FIELDALIAS-awsRegion-for-aws-cloudtrail_vendor_region = awsRegion AS vendor_region
FIELDALIAS-errorCode-for-aws-cloudtrail-result_id = errorCode AS result_id
FIELDALIAS-errorMessage-for-aws-cloudtrail-reason = errorMessage AS reason
FIELDALIAS-errorMessage-for-aws-cloudtrail-result = errorMessage AS result
FIELDALIAS-eventName-for-aws-cloudtrail-command = eventName AS command
FIELDALIAS-eventName-for-aws-cloudtrail_signature = eventName AS signature
FIELDALIAS-eventSource-for-aws-cloudtrail-dvc = eventSource AS dvc
FIELDALIAS-eventTime-for-aws-cloudtrail = eventTime AS start_time
FIELDALIAS-eventType-for-aws-cloudtrail-app = eventType AS app
FIELDALIAS-requestParameters-for-aws-cloudtrail = requestParameters AS desc
FIELDALIAS-requestParameters.instanceType-for-aws-cloudtrail-instance_type = requestParameters.instanceType as instance_type
FIELDALIAS-requestParameters.instancesSet.items{}.imageId-for-aws-cloudtrail-image_id = requestParameters.instancesSet.items{}.imageId as image_id
FIELDALIAS-responseElements.credentials.accessKeyId-for-aws-cloudtrail = responseElements.credentials.accessKeyId AS temp_access_key
FIELDALIAS-sourceIPAddress-for-aws-cloudtrail-src = sourceIPAddress AS src
FIELDALIAS-sourceIPAddress-for-aws-cloudtrail-src_ip = sourceIPAddress AS src_ip
FIELDALIAS-userIdentity.accessKeyId-for-aws-cloudtrail = userIdentity.accessKeyId AS user_access_key
KV_MODE = json
LINE_BREAKER = ([\r\n]+)
LOOKUP-action-status-for-aws-cloudtrail = aws-cloudtrail-action-status-lookup eventName, errorCode OUTPUTNEW action, status
LOOKUP-changeType-for-aws-cloudtrail-lookup = eventName-change_type-for-aws-cloudtrail eventName OUTPUT change_type
LOOKUP-changetype-for-aws-cloudtrail = change_type-for-aws-cloudtrail eventSource OUTPUTNEW change_type
LOOKUP-object_category-for-aws-cloudtrail = aws_cloudtrail_eventname_lookup eventName OUTPUTNEW object_category
LOOKUP-protocol-for-aws-cloudtrail = vpcflow_protocol_code_lookup protocol_code OUTPUT protocol
LOOKUP-vendor-product-for-aws-cloudtrail = vendor-product-for-aws-cloudtrail sourcetype OUTPUTNEW vendor, product
MAX_TIMESTAMP_LOOKAHEAD = 28
REPORT-user-for-aws-cloudtrail-acctmgmt = user-for-aws-cloudtrail-acctmgmt
SHOULD_LINEMERGE = false
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
TIME_PREFIX = \"@timestamp\"\s*\:\s*\"
TRUNCATE = 8388608
description = maps to ec2 exfil log file
disabled = false
pulldown_type = true

[csv_honeybucketlogs]
BREAK_ONLY_BEFORE_DATE = 
DATETIME_CONFIG = 
INDEXED_EXTRACTIONS = csv
KV_MODE = none
LINE_BREAKER = ([\r\n]+)
NO_BINARY_CHECK = true
SHOULD_LINEMERGE = false
TIMESTAMP_FIELDS = Event DateTime
category = Structured
description = Comma-separated value format. Set header and other settings in "Delimited Settings"
disabled = false
pulldown_type = true
TZ = GMT
EXTRACT-vendor_region = s3(?P<vendor_region>[^\.]+)\.amazonaws.com
EXTRACT-src = (?<src>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})
EXTRACT-http_user_agent = (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\,(?<http_user_agent>.*)\,\d+
EXTRACT-dest = Host\':\s\'(?P<dest>[^\.]+)\.s3.*\.amazonaws.com
EXTRACT-bucket_name = \'bucketName\'\:\s\'(?<bucket_name>[^\']+)
